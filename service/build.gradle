/*
 * Copyright (c) 2015 IBM Corporation and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'

def (protocol, server, con) = brunelServer.tokenize('/')
archivesBaseName = con

if (tomcatHome == null) {
    println('WARNING:  TOMCAT_HOME is null.  Possibly not set?')
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.1.1'
    }
}

dependencies {
    providedCompile group: 'org.apache.openejb', name: 'tomee-jaxrs-webapp', version: '1.7.2'
    compile project(':data')
    compile project(':core')
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    testRuntime project(':data').sourceSets.test.output
    testCompile project(':data').sourceSets.test.output
}

configurations {
    all*.exclude group: 'rhino'
    all*.exclude group: 'org.eclipse.jdt'
    all*.exclude module: 'translator-0.5'
}

//For development only
task copyWebFiles(type: Copy, dependsOn: rootProject.assembleWebFiles) {
    description 'Copy Required Web Support Files To Development WebApp Folder'
    from '../out/javascript/readable'
    into 'src/main/webapp/brunelsupport'
}

//Remove copied web files (done in prep for making .war)
task cleanWebFiles(type: Delete) {
    delete 'src/main/webapp/brunelsupport'
}

// The war file will include the needed JS support
war {
    archiveName con + '.war'
    from('../out/javascript/readable') {
        into('/brunelsupport')
    }
}

cargo {
    def (s, p) = server.tokenize(":")
    println 'For Tomcat deployment.  Port:  ' + p + ", Context: " + con

    containerId = 'tomcat7x'
    port = p.toInteger()

    deployable {
        context = con
    }

    local {
        homeDir = file(tomcatHome)

        containerProperties {
            property 'cargo.tomcat.ajp.port', p
        }
    }
}

tasks.copyWebFiles.dependsOn(project(':data').doTranslate)
tasks.war.dependsOn(project(':data').doTranslate)
tasks.war.dependsOn(cleanWebFiles)
