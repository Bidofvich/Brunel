var Shaper = (function() {	
	var cldrStr = '{"General Info": {"Generated from": "CLDR Version: 30.0.3","Generated by": "BDL CLDR Reader Tool","Date": "16-03-17 12:40:12"},' +
		'"Arabic Default Numbering Systems": {"ar": "arab","ar_AE": "arab","ar_BH": "arab","ar_DJ": "arab","ar_DZ": "latn","ar_EG": "arab","ar_EH": "latn",' +
		'"ar_ER": "arab","ar_IL": "arab","ar_IQ": "arab","ar_JO": "arab","ar_KM": "arab","ar_KW": "arab","ar_LB": "arab","ar_LY": "latn","ar_MA": "latn",' +
		'"ar_MR": "arab","ar_OM": "arab","ar_PS": "arab","ar_QA": "arab","ar_SA": "arab","ar_SD": "arab","ar_SO": "arab","ar_SS": "arab","ar_SY": "arab","ar_TD": "arab","ar_TN": "latn","ar_YE": "arab"}}';
	var cldrData = JSON.parse(cldrStr)["Arabic Default Numbering Systems"];
	var isArabicLocale = function (locale) {
		var def = locale.indexOf("-") === 2;
		var und = locale.indexOf("_") === 2;
		var lang = !locale ? "" : def? locale.split("-")[0] : und? locale.split("_")[0] : locale;
		if (!lang || lang !== "ar") {
			return false;
		}
		return true;
	};
	var useLatinNums = function (locale) {
		if (!isArabicLocale(locale))
			return true;
		var country = locale.indexOf("-") < 2? "" : locale.split("-")[1];
		if (!country || country === "")
			country = locale.indexOf("_") < 2? "" : locale.split("_")[1];
		if (!country || country === "")
			return false;
		/*
		return ["dz", "eh", "ly", "ma", "tn"].some(function (arCountry) {
			return arCountry === country.toLowerCase();
		});
		*/
		return (cldrData && cldrData[locale] && cldrData[locale] === "latn");
	};
	var getDirection = function (text, dir, guiDir) {
		if (dir)
			dir = dir.toLowerCase();
		else
			dir = "";
		if (guiDir)
			guiDir = guiDir.toLowerCase();
		if (dir !== "auto" && (/^(rtl|ltr)$/i).test(dir)) {
			return dir;
		}
		guiDir = (/^(rtl|ltr)$/i).test(guiDir) ? guiDir : "ltr";
		var fdc = /[A-Za-z\u05d0-\u065f\u066a-\u06ef\u06fa-\u07ff\ufb1d-\ufdff\ufe70-\ufefc]/.exec(text);
		return fdc ? (fdc[0] <= "z" ? "ltr" : "rtl") : guiDir;
	};
	var hasSelection = function(node, container) {
	    while (node) {
	        if (node === container) {
	            return true;
	        }
	        if (node.parentNode === document.body)
	        	return false;
	        node = node.parentNode;
	    }
	    return false;
	};
	var getChar = function(event) {
		if (event.which == null) {
			return String.fromCharCode(event.keyCode);
		} 
		else if (event.which!=0 && event.charCode!=0) {
			return String.fromCharCode(event.which);
		} 
		else {
			return null;
		}
	};
	var isInputEventSupported = function(element) {
		var agent = window.navigator.userAgent;
		if (agent.indexOf("MSIE") >= 0 || agent.indexOf("Trident") >= 0 || agent.indexOf("Edge") >= 0)
			return false;
	    var checked = document.createElement(element.tagName);
	    checked.contentEditable = true;
	    var isSupported = ("oninput" in checked);
	    if (!isSupported) {
	      checked.setAttribute('oninput', 'return;');
	      isSupported = typeof checked['oninput'] == 'function';
	    }
	    checked = null;
	    return isSupported;
	};
	
	var NONE = -1;
	var EUROPIAN = 0;
	var INDIC = 1;
	var CONTEXTUAL = 2;
	var NATIONAL = 3;
	var arrTypes = {};
	arrTypes["EUROPIAN"] = EUROPIAN;
	arrTypes["INDIC"] = INDIC;
	arrTypes["CONTEXTUAL"] = CONTEXTUAL;
	arrTypes["NATIONAL"] = NATIONAL;
	var arrNames = ["EUROPIAN","INDIC","CONTEXTUAL","NATIONAL"];
	var segmentDir;
	var re = /([0-9])|([\u0660-\u0669])|([\u0590-\u05FF\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FF\u0750-\u077F\u08A0-\u08E3\u200F\u202B\u202E\u2067\uFB50-\uFD3D\uFD40-\uFDCF\uFDF0-\uFDFC\uFDFE-\uFDFF\uFE70-\uFEFE]+)|([^0-9\u0590-\u05FF\u0660-\u0669\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FF\u0750-\u077F\u08A0-\u08E3\u200F\u202B\u202E\u2067\uFB50-\uFD3D\uFD40-\uFDCF\uFDF0-\uFDFC\uFDFE-\uFDFF\uFE70-\uFEFE\u0600-\u0607\u0609-\u060A\u060C\u060E-\u061A\u064B-\u066C\u0670\u06D6-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u08E4-\u08FF\uFD3E-\uFD3F\uFDD0-\uFDEF\uFDFD\uFEFF\u0000-\u0040\u005B-\u0060\u007B-\u007F\u0080-\u00A9\u00AB-\u00B4\u00B6-\u00B9\u00BB-\u00BF\u00D7\u00F7\u02B9-\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u02FF\u2070\u2074-\u207E\u2080-\u208E\u2100-\u2101\u2103-\u2106\u2108-\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A-\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189\uA720-\uA721\uA788\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE]+)/g;
	
	return {
		NONE: NONE,
		EUROPIAN: EUROPIAN,
		INDIC: INDIC,
		CONTEXTUAL: CONTEXTUAL,
		NATIONAL: NATIONAL,
		
		reshapeString: function(text, stype, locale, dir, guiDir) {
			var type;
			if (typeof stype === 'string')
				type = arrTypes[stype.toUpperCase()] !== undefined? arrTypes[stype.toUpperCase()] : NONE;
			else if(typeof stype === 'number') {
				stype = Math.floor(stype);
				type = stype >= EUROPIAN && stype <= NATIONAL? stype : NONE;
			}
			else
				type = NONE;
			if (!isArabicLocale(locale))
				type = EUROPIAN;
			if (type === undefined || type === NONE)
				return text;
			segmentDir = dir = getDirection(text, dir, guiDir);
			return text.replace(re, function(curChs, latNum, araNum, rtlChs, ltrChs) {
				if (araNum) {
					if (type === EUROPIAN || (type === CONTEXTUAL && segmentDir === "ltr") || (type === NATIONAL && useLatinNums(locale)))
						return araNum.charCodeAt(0) - 1632;
					else
						return araNum;
				}
				else if(latNum) {
					if (type === INDIC || (type === CONTEXTUAL && segmentDir === "rtl") || (type === NATIONAL && !useLatinNums(locale)))
						return String.fromCharCode(parseInt(latNum) + 1632);
					else
						return latNum;					
				}
				else if(rtlChs) {
					segmentDir = "rtl";
				}
				else if(ltrChs){
					segmentDir = "ltr";
				}
				return curChs;
			});
		},
		
		reshapeHTML: function(element, stype) {
			if (!element || element.nodeType != 1)
				return element;
			if (typeof stype === 'string')
				stype = arrTypes[stype.toUpperCase()] !== undefined? arrTypes[stype.toUpperCase()] : NONE;
			else if(typeof stype === 'number') {
				stype = Math.floor(stype);
				stype = stype >= EUROPIAN && stype <= NATIONAL? stype : NONE;
			}
			else if(stype !== undefined)
				stype = NONE;
			var type = stype !== undefined? stype : element.getAttribute("data-ns-type")? arrTypes[element.getAttribute("data-ns-type").toUpperCase()] : NONE;
			if (type === NONE)
				return element;
			var dir = window.getComputedStyle(element, null).getPropertyValue("direction");
			var locale = element.lang || document.documentElement.lang;
			if (!locale) {
				locale = typeof navigator === "undefined" ? "" : navigator.languages ? navigator.languages[0] :
					(navigator.language ||
					navigator.userLanguage ||
					"");
			}
			var selection = document.getSelection();
			var out = false;
			var range, startNode, startOffset, ntype;
			try {
				range = selection.getRangeAt(0).cloneRange();
				startNode = range.startContainer;
				ntype = startNode.nodeType;
				startOffset = range.startOffset;
			}catch(e) {out = true;}			
			var isSelected = out? false : hasSelection(range.commonAncestorContainer, element); 
			var text = this.reshapeString(element.textContent, type, locale, dir);
			if (isSelected)
				selection.removeAllRanges();
			var node = element.firstChild;
			var offset = 0;
			var stop = false;
			while (node) {
				if (node.nodeType === 3) {
					var len = node.nodeValue.length;
					node.nodeValue = text.substring(offset, offset+len);
					if (isSelected && node === startNode)
						range.setStart(node, startOffset);
					offset += len;
					if (offset >= text.length)
						break;
				}
				else if(node.nodeType === 1 && node.hasChildNodes()) {
					node = node.firstChild;
					continue;
				}
				if (node.nextSibling) {
					node = node.nextSibling;
					continue;
				}
				while(true) {
					if (node.parentNode === element) {
						stop = true;
						break;
					}
					if (node.parentNode.nextSibling) {
						node = node.parentNode.nextSibling;
						break;
					}
					node = node.parentNode;
				}
				if (stop)
					break;
			}
			if (isSelected)
				selection.addRange(range);
			return element;
		},
		
		reshapeInputNumber: function(element, slocale, stype) {
			if (!element || element.nodeName != "INPUT" || !element.type || element.type.toLowerCase() !== "number")
				return;
			if (typeof stype === 'string')
				stype = arrTypes[stype.toUpperCase()] !== undefined? arrTypes[stype.toUpperCase()] : NONE;
			else if(typeof stype === 'number') {
				stype = Math.floor(stype);
				stype = stype >= EUROPIAN && stype <= NATIONAL? stype : NONE;
			}
			else if(stype !== undefined)
				stype = NONE;
			var type = stype !== undefined? stype : element.getAttribute("data-ns-type")? arrTypes[element.getAttribute("data-ns-type").toUpperCase()] : NONE;
			if (type === undefined || type === NONE)
				return;
			var locale = slocale || element.lang || document.documentElement.lang;
			if (!locale) {
				locale = typeof navigator === "undefined" ? "" : navigator.languages ? navigator.languages[0] :
					(navigator.language ||
					navigator.userLanguage ||
					"");
			}
			if (type == EUROPIAN || !isArabicLocale(locale) || (type === NATIONAL && useLatinNums(locale)))
				element.lang = "";
			else
				element.lang = "ar";
		},
		
		reshapeTextUp: function(element, slocale, stype) {
			if (!element || ((element.nodeName !== "INPUT" || (element.type && element.type.toLowerCase() !== "text" && 
					element.type.toLowerCase() !== "number")) && element.nodeName !== "TEXTAREA"))
				return true;
			if (typeof stype === 'string')
				stype = arrTypes[stype.toUpperCase()] != undefined? arrTypes[stype.toUpperCase()] : NONE;
			else if(typeof stype === 'number') {
				stype = Math.floor(stype);
				stype = stype >= EUROPIAN && stype <= NATIONAL? stype : NONE;
			}
			else if(stype !== undefined)
				stype = NONE;
			var type = stype !== undefined? stype : element.getAttribute("data-ns-type")? arrTypes[element.getAttribute("data-ns-type").toUpperCase()] : NONE;
			if (type === undefined || type === NONE)
				return true;
			var locale = slocale || element.lang || document.documentElement.lang;
			if (!locale) {
				locale = typeof navigator === "undefined" ? "" : navigator.languages ? navigator.languages[0] :
					(navigator.language ||
					navigator.userLanguage ||
					"");
			}
			if (!isArabicLocale(locale))
				return true;
			var start = null, end = null;
			try {
				start = element.selectionStart;
				end = element.selectionEnd;
			} catch(e){};
			var dir = window.getComputedStyle(element, null).getPropertyValue("direction");
			if (element.type && element.type.toLowerCase() === "number") {
				if (element.value && element.value !== "") {
					element.stepUp();
					element.stepDown();
				}
			}
			else
				element.value = this.reshapeString(element.value, type, locale, dir);
			if (start != null && end != null)
				element.setSelectionRange(start, end);
			return true;
		},
		
		reshapeTextPress: function(event) {
			var element = event.target;
			var ch = getChar(event);
			if (!ch || event.altKey || event.ctrlKey)
				return true;
			var type;
			if (element.getAttribute("data-ns-type") && arrTypes[element.getAttribute("data-ns-type").toUpperCase()])
				type = arrTypes[element.getAttribute("data-ns-type").toUpperCase()];
			else
				return true;
			var locale = element.lang || document.documentElement.lang;
			if (!locale) {
				locale = typeof navigator === "undefined" ? "" : navigator.languages ? navigator.languages[0] :
					(navigator.language ||
					navigator.userLanguage ||
					"");
			}
			if (!isArabicLocale(locale))
				return true;
			if (element.type && element.type.toLowerCase() === "number") {
				if (element.value && element.value !== "") {
					element.stepUp();
					element.stepDown();
				}
				return true;
			}
			var start = null, end = null;
			try {
				start = element.selectionStart;
				end = element.selectionEnd;
			} catch(e) {}
			var text = element.value.substring(0,start) + ch + element.value.substring(start,element.value.length);
			element.value = this.reshapeString(text, type, locale, window.getComputedStyle(element, null).getPropertyValue("direction"));
			if (start != null && end != null)
				element.setSelectionRange(start+1, end+1);
			return false;
		},
		
		attachElement: function(element, type, locale) {
			if (!element || element.nodeType != 1 /*|| !element.isContentEditable*/)
				return;
			element.setAttribute("data-ns-attached", "div");
			if (typeof type !== "undefined") {
				if (typeof type === 'string')
					type = arrTypes[type.toUpperCase()] !== undefined? arrTypes[type.toUpperCase()] : NONE;
				else if(typeof type === 'number') {
					type = Math.floor(type);
					type = type >= EUROPIAN && type <= NATIONAL? type : NONE;
				}
				else
					type = NONE;
				if (type !== NONE)
					element.setAttribute("data-ns-type", arrNames[type]);
				else
					element.removeAttribute("data-ns-type");
			}
			if (typeof locale === "string")
				element.setAttribute("lang", locale);
			var self = this;
			if (isInputEventSupported(element)) {
				element.oninput = function(event) {
					if (event.target.hasAttribute("data-ns-attached"))
						self.reshapeHTML(event.target);
				};
			}
			else {
				element.onkeyup = element.onmouseup = function(e) {
					if (e.target.hasAttribute("data-ns-attached"))
						self.rehapeHTML(e.target);
				};
			} 
			this.reshapeHTML(element);
		},
		
		attachInput: function(element, type, locale) {
			if (!element || ((element.nodeName !== "INPUT" || (element.type && element.type.toLowerCase() !== "text" && 
					element.type.toLowerCase() !== "number")) && element.nodeName !== "TEXTAREA"))
				return;
			element.setAttribute("data-ns-attached", "input");
			if (typeof type !== "undefined") {
				if (typeof type === 'string')
					type = arrTypes[type.toUpperCase()] != undefined? arrTypes[type.toUpperCase()] : NONE;
				else if(typeof type === 'number') {
					type = Math.floor(type);
					type = type >= EUROPIAN && type <= NATIONAL? type : NONE;
				}
				else
					type = NONE;
				if (type !== NONE)
					element.setAttribute("data-ns-type", arrNames[type]);
				else
					element.removeAttribute("data-ns-type");
			}
			if (typeof locale === "string")
				element.setAttribute("lang", locale);
			var self = this;
			if (element.nodeName === "INPUT" && element.type && element.type.toLowerCase() === "number")
				if (element.hasAttribute("data-ns-attached"))
					self.reshapeInputNumber(element, locale, type);
			element.onkeyup = function(e) {
				if (e.target.hasAttribute("data-ns-attached"))
					self.reshapeTextUp(e.target);
			};
			element.onkeypress = function(e) {
				if (e.target.hasAttribute("data-ns-attached")) {
					if (!self.reshapeTextPress(e))
						e.preventDefault();
				}
			};
			this.reshapeTextUp(element);
		},
		
        isBidiLocale: function(locale) {
            if (!locale)
                return false;
            if (locale.length() < 2)    
                return false;
            lang = locale.substring(0,2);
            return lang == "he" || lang == "iw" || lang == "ar";
        },
        
        isArabicLocale: function(locale) {
            return isArabicLocale(locale); 
        },        
        
		detach: function(element) {
			if (element.hasAttribute("data-ns-attached")) {
				if (element.getAttribute("data-ns-attached") === "div")
					this.reshapeHTML(element, EUROPIAN);
				else if (!(element.nodeName === "INPUT" && element.type && element.type.toLowerCase() === "number"))
					this.reshapeTextUp(element, element.lang, EUROPIAN);
				element.removeAttribute("data-ns-attached");
			}
		}

	};
})(window.Shaper || {});

function bidiProcessing(locale, textdir, guidir, numshape) {    
    if (!locale)
        locale = navigator.language || navigator.userLanguage;
    isArabic = Shaper.isArabicLocale(locale);
   
    if (!guidir)
        guidir = Shaper.isBidiLocale(locale) ? "rtl" : "ltr";
        
    if (!textdir)
        textdir = guidir;

    isMirror = (guidir === "rtl");   
    
    if (!numshape)
        numshape = isArabic? 'contextual' : 'none';
                
    if (d3) {
      d3.json("https://unpkg.com/d3-format@1.2.0/locale/" + locale + ".json", function(error, localeJSON) {
        if (!error)
           BrunelD3Locale = d3.formatLocale(localeJSON);
      });
    }

    if (!(isArabic || isMirror))
        return; //nothing to do
    
    var texts = document.getElementsByTagName("text");
    var rect;
    var text;
    var boxX;
    var shift;
    for (var i = 0; i < texts.length; i++) {        
        text = texts[i];
        if (isArabic) {
            //numeric shaping
            text.textContent = Shaper.reshapeString(text.textContent, numshape, locale, guidir, guidir);
        }
        if (isMirror) {
            //text mirroring
            rect = text.getBoundingClientRect();   
            boxX = text.getBBox().x; 
            shift = rect.right - rect.left + 2*boxX;    
            text.setAttribute('transform', 'translate(' + shift + ',0) scale(-1,1)');
        }
    }
}
